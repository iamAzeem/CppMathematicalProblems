// Maximum product of adjacent 13-digits in a 1000-digit number
// Written by: AZEEM

#include <iostream>
#include <cstdlib>
#include <string>
using namespace std;

const unsigned int MAX_DIGITS = 13;
unsigned long long product( const string &s );

int main(void)
{
	string s = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737"
		   "958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893"
		   "423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169"
		   "972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617"
		   "406495514929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585412275886"
		   "668811642717147992444292823086346567481391912316282458617866458359124566529476545682848912883142607690042242190226710556263211111"
		   "093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606058"
		   "8611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

	unsigned long long MAX = 0, number = 0;
	const unsigned int MAX_ITERATIONS = s.length() - MAX_DIGITS + 1;
	string maxNumber;
	
	for( unsigned int i = 0; i < MAX_ITERATIONS; i++ )
	{
		number = product( s.substr(i, MAX_DIGITS) );
		if( MAX < number )
		{
			MAX = number;
			maxNumber = s.substr( i, MAX_DIGITS );
		}
	}

	cout << "Maximum product of adjacent " << MAX_DIGITS
	     << " digits \"" << maxNumber << "\" is: " << MAX << endl;

	return 0;
}

unsigned long long product( const string &s )
{
	unsigned long long product = 1;
	unsigned int digit = 0;
	for( unsigned int i = 0; i < MAX_DIGITS && product; i++ )
	{
		digit = atoi( s.substr(i, 1).c_str() );
		product *= digit;
	}
	return product;
}
